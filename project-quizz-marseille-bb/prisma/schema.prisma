// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  MODO
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  OPEN
  IN_PROGRESS
  FINISHED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstname String?
  lastname  String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  players   Player[]
  Game      Game[]

  @@index([email])
}

model Player {
  id               String            @id @unique @default(uuid())
  name             String
  elo              Int               @default(0)
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  playerActivities PlayerActivites[]
  histories        PlayerHistories[]
  quizzes          Quiz[]

  @@index([name])
}

model PlayerActivites {
  playerId String
  gameId   String
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([playerId, gameId])
}

model Game {
  id                   String            @id @unique @default(uuid())
  name                 String
  description          String            @db.Text
  score                Json
  status               Status            @default(OPEN)
  joker_used           Json
  disconnected_players Json
  current_question     Int               @default(0)
  total_question       Int               @default(0)
  quizId               String
  ownerGameId          String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  players              PlayerActivites[]
  quiz                 Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  owner                User              @relation(fields: [ownerGameId], references: [id], onDelete: Cascade)
}

model PlayerHistories {
  name          String
  elo           Int
  playerId      String
  historyGameId String
  players       Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  historyGame   HistoryGame @relation(fields: [historyGameId], references: [id], onDelete: Cascade)

  @@id([playerId, historyGameId])
}

model HistoryGame {
  id              String            @id @unique @default(uuid())
  score           Json
  joker_used      Json
  total_question  Int
  winner          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  quizId          String?
  quiz            Quiz?             @relation(fields: [quizId], references: [id], onDelete: SetNull)
  playerHistories PlayerHistories[]
}

model Quiz {
  id           String         @id @unique @default(uuid())
  name         String
  description  String         @db.Text
  difficulty   Difficulty
  maxPlayers   Int
  ownerId      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  owner        Player?        @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  games        Game[]
  histories    HistoryGame[]
  questions    QuizQuestion[]
  themes       Theme[]
  themeQuizzes ThemeQuiz[]

  @@index([name])
}

model Question {
  id             String          @id @unique @default(uuid())
  text           String          @db.Text
  correctAnswer  String
  themeId        String?
  theme          Theme?          @relation(fields: [themeId], references: [id], onDelete: SetNull)
  quizzes        QuizQuestion[]
  answers        Answer[]
  themeQuestions ThemeQuestion[]
}

model QuizQuestion {
  quizId     String
  questionId String
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([quizId, questionId])
}

model Answer {
  id         String   @id @unique @default(uuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Theme {
  id           String          @id @unique @default(uuid())
  name         String          @unique
  description  String          @db.Text
  questions    Question[]
  quizzes      Quiz[]
  themes       ThemeQuestion[]
  themeQuizzes ThemeQuiz[]

  @@index([name])
}

model ThemeQuestion {
  themeId    String
  questionId String
  theme      Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([themeId, questionId])
}

model Joker {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ThemeQuiz {
  themeId String
  quizId  String
  theme   Theme  @relation(fields: [themeId], references: [id], onDelete: Cascade)
  quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@id([themeId, quizId])
}
